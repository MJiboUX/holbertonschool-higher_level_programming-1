Importing function:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Correct output:
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Correct output:
>>> matrix_divided([[2, 4, 6], [10, 20, 30]], 2)
[[1.0, 2.0, 3.0], [5.0, 10.0, 15.0]]

Matrix should be of type list:
>>> matrix_divided(5, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix should be type list of lists:
>>> matrix_divided([[1, 2, 3], "a"], 5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Elements must be integers/floats:
>>> matrix_divided([[1, 2, "abcde"], [1, 2, 3]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Number of elements should have the same size:
>>> matrix_divided([[1, 2, 3], [1, 2, 3, 4]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Divisor must be a number(integer/float):
>>> matrix = [[2, 4, 6], [1, 2, 3]]
>>> matrix_divided(matrix, "abc")
Traceback (most recent call last):
    ...
TypeError: div must be a number

Divisor can't be equal to 0:
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

Missing one argument:
>>> matrix_divided([[1, 2, 3], [1, 2, 3]], None)
Traceback (most recent call last):
    ...
TypeError: div must be a number

Missing 2 arguments:
>>> matrix_divided(None, None)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
